Ext.data.JsonP.Ramen_app_Controller({"tagname":"class","name":"Ramen.app.Controller","autodetected":{},"files":[{"filename":"Controller.js","href":"Controller.html#Ramen-app-Controller"}],"mixins":["JSoop.mixins.Configurable"],"members":[{"name":"helpers","tagname":"cfg","owner":"Ramen.app.Controller","id":"cfg-helpers","meta":{}},{"name":"routes","tagname":"cfg","owner":"Ramen.app.Controller","id":"cfg-routes","meta":{}},{"name":"constructor","tagname":"method","owner":"Ramen.app.Controller","id":"method-constructor","meta":{}},{"name":"control","tagname":"method","owner":"Ramen.app.Controller","id":"method-control","meta":{}},{"name":"initController","tagname":"method","owner":"Ramen.app.Controller","id":"method-initController","meta":{"template":true}},{"name":"navigate","tagname":"method","owner":"Ramen.app.Controller","id":"method-navigate","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Ramen.app.Controller","short_doc":"Represents a set of behaviors. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Mixins</h4><div class='dependency'>JSoop.mixins.Configurable</div><h4>Files</h4><div class='dependency'><a href='source/Controller.html#Ramen-app-Controller' target='_blank'>Controller.js</a></div></pre><div class='doc-contents'><p>Represents a set of behaviors. In general this means responding to changes in page state or using\n<a href=\"#!/api/Ramen.view.View\" rel=\"Ramen.view.View\" class=\"docClass\">view</a> events to change that state. Controllers do this through\n<a href=\"#!/api/Ramen.app.Controller-cfg-routes\" rel=\"Ramen.app.Controller-cfg-routes\" class=\"docClass\">routes</a> and <a href=\"#!/api/Ramen.app.Controller-method-control\" rel=\"Ramen.app.Controller-method-control\" class=\"docClass\">controlls</a>. For example, a\ncontroller designed to handle user state could look something like:</p>\n\n<pre><code> JSoop.define('Demo.controller.User', {\n     extend: '<a href=\"#!/api/Ramen.app.Controller\" rel=\"Ramen.app.Controller\" class=\"docClass\">Ramen.app.Controller</a>',\n\n     routes: {\n         'users/list': 'onRouteList',\n         'users/edit/:user': 'onRouteEdit'\n     },\n\n     initController: function () {\n         var me = this;\n\n         me.control({\n             'user-list': {\n                 'select': me.onUserSelect,\n                 'scope': me\n             }\n         });\n\n         me.callParent(arguments);\n     },\n\n     onRouteEdit: function (user) {\n         user = <a href=\"#!/api/Ramen-method-getCollection\" rel=\"Ramen-method-getCollection\" class=\"docClass\">Ramen.getCollection</a>('Users').get(parseInt(user, 10));\n         ...\n     },\n\n     onUserSelect: function (user) {\n         this.navigate('users/edit/' + user.get('id'));\n     }\n });\n</code></pre>\n\n<p>If a controller starts becoming too large, it is advisable to break it into smaller pieces using\n<a href=\"#!/api/Ramen.app.Helper\" rel=\"Ramen.app.Helper\" class=\"docClass\">helpers</a>. This can make very large sections of your app's behavior easier to manage, without\nbreaking the desired structure.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-helpers' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ramen.app.Controller'>Ramen.app.Controller</span><br/><a href='source/Controller.html#Ramen-app-Controller-cfg-helpers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ramen.app.Controller-cfg-helpers' class='name expandable'>helpers</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>A list of helpers that will be created. ...</div><div class='long'><p>A list of helpers that will be created. For example:</p>\n\n<pre><code> ...\n helpers: {\n     search: 'Demo.controller.helpers.UserSearch'\n },\n ...\n</code></pre>\n\n<p>See <a href=\"#!/api/Ramen.app.Helper\" rel=\"Ramen.app.Helper\" class=\"docClass\">Ramen.app.Helper</a> for more details about helpers.</p>\n</div></div></div><div id='cfg-routes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ramen.app.Controller'>Ramen.app.Controller</span><br/><a href='source/Controller.html#Ramen-app-Controller-cfg-routes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ramen.app.Controller-cfg-routes' class='name expandable'>routes</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>A list of routes and callbacks. ...</div><div class='long'><p>A list of routes and callbacks. If the browser's hash matches one of the patterns here, it will trigger the\ndefined callback. The callback can be either a function or name of a function. Also, the scope of a callback\ncan be defined with either an object, or the name of a helper. For example:</p>\n\n<pre><code> ...\n helpers: {\n     'search': 'Demo.controller.helpers.UserSearch'\n },\n\n routes: {\n     'users/edit/:user': 'onRouteEdit',\n     'users/search?:query': {\n         fn: 'onRouteSearch',\n         //use the search helper\n         scope: 'search'\n     }\n },\n\n onRouteEdit: function (user) {\n     ...\n },\n ...\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ramen.app.Controller'>Ramen.app.Controller</span><br/><a href='source/Controller.html#Ramen-app-Controller-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Ramen.app.Controller-method-constructor' class='name expandable'>Ramen.app.Controller</a>( <span class='pre'>config</span> ) : <a href=\"#!/api/Ramen.app.Controller\" rel=\"Ramen.app.Controller\" class=\"docClass\">Ramen.app.Controller</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new controller ...</div><div class='long'><p>Creates a new controller</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The config object</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Ramen.app.Controller\" rel=\"Ramen.app.Controller\" class=\"docClass\">Ramen.app.Controller</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-control' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ramen.app.Controller'>Ramen.app.Controller</span><br/><a href='source/Controller.html#Ramen-app-Controller-method-control' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ramen.app.Controller-method-control' class='name expandable'>control</a>( <span class='pre'>config</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets up view queries that can be used to identify new views added to\nRamen.view.ViewManager. ...</div><div class='long'><p>Sets up <a href=\"#!/api/Ramen.view.Query\" rel=\"Ramen.view.Query\" class=\"docClass\">view queries</a> that can be used to identify new views added to\n<a href=\"#!/api/Ramen.view.ViewManager\" rel=\"Ramen.view.ViewManager\" class=\"docClass\">Ramen.view.ViewManager</a>. If a view matches one of the selectors, the events nested in the object will be\nattached to it. For example, this will attach to all new views and log a message when they are rendered:</p>\n\n<pre><code> this.control({\n     //look for all new views\n     'view': {\n         'render:after': function (view) {\n             console.log(view.getId() + ' rendered');\n         }\n     }\n });\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The list of selectors and events this controller should react to</p>\n</div></li></ul></div></div></div><div id='method-initController' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ramen.app.Controller'>Ramen.app.Controller</span><br/><a href='source/Controller.html#Ramen-app-Controller-method-initController' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ramen.app.Controller-method-initController' class='name expandable'>initController</a>( <span class='pre'></span> )<span class=\"signature\"><span class='template' >template</span></span></div><div class='description'><div class='short'>Called after the config has been applied, but before any other actions have been taken. ...</div><div class='long'><p>Called after the config has been applied, but before any other actions have been taken.</p>\n      <div class='rounded-box template-box'>\n      <p>This is a <a href=\"#!/guide/components\">template method</a>.\n         a hook into the functionality of this class.\n         Feel free to override it in child classes.</p>\n      </div>\n</div></div></div><div id='method-navigate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ramen.app.Controller'>Ramen.app.Controller</span><br/><a href='source/Controller.html#Ramen-app-Controller-method-navigate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ramen.app.Controller-method-navigate' class='name expandable'>navigate</a>( <span class='pre'>config</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Changes the current history state ...</div><div class='long'><p>Changes the current history state</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object/string<div class='sub-desc'><p>The config object or new fragment</p>\n<ul><li><span class='pre'>fragment</span> : string<div class='sub-desc'><p>The new fragment</p>\n</div></li><li><span class='pre'>silent</span> : boolean (optional)<div class='sub-desc'><p>Whether or not to supress the change event</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>replace</span> : boolean (optional)<div class='sub-desc'><p>Whether or not to replace the current history state</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></li></ul></div></div></div></div></div></div></div>","meta":{}});